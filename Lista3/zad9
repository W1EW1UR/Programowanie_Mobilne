data class StudentScore(val name: String, val subject: String, val score: Int)

fun main() {
    val students = listOf(
    StudentScore("Alice", "Math", 78),
    StudentScore("Bob", "Math", 45),
    StudentScore("Charlie", "Physics", 92),
    StudentScore("Dave", "Physics", 55),
    StudentScore("Eve", "Physics", 40),
    StudentScore("Frank", "CS", 60),
    StudentScore("Grace", "CS", 80),
	)
    
    val (passedBySubject, failed, subjectsAllPassed) = analyzeResults(students)
    
    println("Zdani studenci według przedmiotów: $passedBySubject \n")
    println("Niezdani studenci: $failed \n")
    println("Przedmioty, w których wszyscy zdali: $subjectsAllPassed \n")
}

fun analyzeResults(students : List<StudentScore>): Triple<Map<String, List<StudentScore>>, List<StudentScore>, List<String>>
    {
        val passedBySubject = students
            .filter{it.score > 50}
            .groupBy{it.subject}
            
            
        val failed = students
            .filter{it.score <= 50}
            
            
        var subjectsAllPassed: MutableList<String> = mutableListOf()
		val przedmioty = students.map{it.subject}.toSet()
        
        for(p in przedmioty)
        {
            if(students.filter{it.subject == p}.all{it.score > 50})
            {
                subjectsAllPassed.add(p)
            }
        }
        
      
        return Triple( passedBySubject , failed , subjectsAllPassed.toList() )
        
    }

