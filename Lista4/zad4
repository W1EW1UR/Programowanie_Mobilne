import kotlin.random.*
import java.time.LocalDate	// Inaczej nie wie czym jest LocalDate

//==============================================================
//=================		KLASY I OBJEKTY		====================

enum class CostType(val costType: String) {		// Typ kosztu
    REFUELING("Tankowanie"),
    SERVICE("Serwis"),
    PARKING("Parking"),
    INSURANCE("Ubezpieczenie"),
    TICKET("Mandat")
}

//===============
//===== Cost ====

data class Cost (		// Dane kosztu
    val type: CostType,
    val date: LocalDate,
    val amount: Int
)

//===============
//===== Car =====

data class Car (		//Dane Samochodu
    val name: String,
    val brand: String,
    val model: String,
    val yearOfProduction: Int,
    val costs: List<Cost>
)

//================
//= DataProvider =

object DataProvider {
    
    private fun  generalCosts(size: Int) = List(size) {
    Cost(
        CostType.values()[Random.nextInt(CostType.values().size)],
        LocalDate.of(
            2025, 
            Random.nextInt(1,13), 
            Random.nextInt(1,28)),
        Random.nextInt(5000)
        )
    }

    val cars = listOf(
        Car("Domowy", "Skoda", "Fabia", 2002, generalCosts(100)),
        Car("Służbowy", "BMW", "Coupe", 2015, generalCosts(50)),
        Car("Kolekcjonerski", "Fiat", "125p", 1985, generalCosts(10))
    )

}

//================================================================================================
//=======================	MAIN	============================

fun main() {

    
	printFullCost(getFullCosts(DataProvider.cars))

}

//==============================================================
//=======================	FUNKCJE		========================

fun getFullCosts(lst: List<Car>):Map<CostType, Int>
{
    
	var Suma: MutableMap<CostType, Int> = CostType.values().associateWith { 0 }.toMutableMap()   // Tworze MUTOWALNĄ mape typów gdzie kazdy ma wartości "0"
    
	
    for(Samochod in DataProvider.cars)		// Sumuje koszta dla każdego samochodu osobno
    {
        var Koszt = Samochod
    	.costs		// wchodze w koszta
   		.groupBy( {it.type} , {it.amount} )	// Grupuje typy razem z kwotami
        .mapValues{		it.value.reduce{acc,curr -> acc + curr}	}	// Kwoty sumuje w jedno dla każdego typu
        
     // Tylko do wglądu
     // ===============
 	    println()
     	for ((klucz, wartosc) in Koszt)
        	println("$klucz -> $wartosc")
		println()
     // ===============
     
        for ((klucz, wartosc) in Koszt) {
            // Jeśli klucz istnieje w mapie Suma, to sumujemy wartości
            if (klucz in Suma) {
                Suma[klucz] = wartosc +  Suma.getValue(klucz) // Dodaje wartosc Koszt do wartosci Sumy
            }
        }
    }
      

    return Suma.toMap()  // konwertuje spowrotem na mape
    
}

//===============		Car(name=Domowy, brand=Skoda, model=Fabia, yearOfProduction=2002, costs=[Cost(type=REFUELING, date=2025-06-08, amount=3794),Cost(type=TICKET, date=2025-06-08, amount=6586), ... ]
//===============

fun printFullCost(mapa: Map<CostType, Int>):Unit
{
    println()
    for ((klucz, wartosc) in mapa)
    	println("$klucz -> $wartosc")
    
}
